R guide: 


In RStudio, 
Ctrl + Enter executes code in a file (like Julia+Atom/Jupyter uses Shift+Enter)

Declaring variables : 

x <- 2 


# Comment entries (Python style)


Vectors (like numpy arrays/julia vectors): 

v <- c(1, 2, 3, 4, 5)

c(...) is the constructor to create a vector 


Broadcasting : 
Completely implicit (feels like numpy) 
 
x <- c(1, 2, 3, 4, 5)
y <- c(2, 3, 4, 5, 6)

x/y 

(x-y)^2 		# note the julia style of taking powers 


	

Plotting: 
# where x, y are vectors 

plot(x, y)		# scatter plot
lines(x, y)		# line plot 

dev.off(dev.list()["RStudioGD"])		# clears all plots



NULL is the default value (as compared to None (py), NULL(C))



T == TRUE == !F == !FALSE   # pls standardize this 

'a' == "a"      # python style 



print("HELLO") 
->    "HELLO"
cat("HELLO")
->     HELLO 

cat prints out the contents like linux

MOREOVER, 
print("The value of x = ", x) 	# DOES NOT WORK 
cat("The value of x = ", x)	# WILL WORK 



NA = missing value 



Type of data: 
is(x) 		# what is x?



Installing packages: 
install.packages("pkgname")
find.package("name of pkg")		# where installed - use to verify 
library(name of pkg without quotes) 	# import it





R markdown: 
ALlows you to integrate text, pictures, code 
File -> New File -> new R markdown file 
Choose type 
Knit 


Code blocks in Rmd
```{r divName}
	# the code you put here will be executed in a NEW state for Rmd 
	# so if you want to print out some values, 
	# you have to have declared them previously in Rmd.
	ages = c(18, 19, 20)
	print(ages)
```

if you want to show the code block without executing, 
```{r eval=FALSE}
	# code block
```

if you want to show the code block, and execute it, but not show the output (l
```{r load_mosaic, echo=T, results='hide', message=F, warning=F} 
library(mosaic)
find("mosaic")
```

cbind: 
cbind(vector1, vector2) 		# concatenates v1, v2 as columns to produce a matrix
					# vectors of different types are cast to type with highest precedence. 



Reading in data: 

setwd(Dir where file is)
data = read.csv(file = "filename.csv")
produces a data.frame object 


Viewing data: 
View(data)		# displays it in a nice way


str(data) 		# gives you info about data		pd.info(df)


In R, a dataframe is a set of LISTS  (like pd Series), each associated with some name

data$ages		# extracts the VALUES in the ages list as a vector 
data["ages"]		# extracts the ages list itself   - 	the series 


data[1:5, "Visits"] 	# [rows, columns]



EDA: 


Similar to pandas, not as powerful imo

remember that pandas likes [' '], and that R likes $ 

so if we want the copper values for the entires in the table that have region = north, 

north_copper = data$copper[data$Region == 'North']

		in pandas I'd do : data[data['Region'] == 'North']['copper'] 


like pandas, data$Region == 'North' produces a vector with T/F 
note, R is more picky about vectors vs lists (series) that pandas is 
so if [] doesn't work, $ will likely work. 


NOTE: the above works only for VECTORS (1D)

let's say we want all the entries in the dataframe such that region = north, 

north_region  = data[data$region == 'North, ]  # NOTE THE USE OF THE COMMA !!!!!!!!!

# IT WILL GIVE A WEIRD ERROR WITHOUT THE COMMA 




Probability: 

Each distribution has a family of functions 
	
Prefix Name of Distr 

PRefix: 
	r : random - create  random sample from the distrib 
	d : density - want the height at a certain point - probability of a sample in that distrib

	p : area under the curve to the left of the value you input in the function (cumulative prob)
	q : quantile - input a cumulative probability (like 0.80), tells you the value or z score that gives you that 
			cumulative probability 


Distrib: 
	unif 
	norm
	binom 










